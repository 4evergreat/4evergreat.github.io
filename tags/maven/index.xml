<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Maven on alwaysGreat&#39;s blog</title>
        <link>https://4evergreat.github.io/tags/maven/</link>
        <description>Recent content in Maven on alwaysGreat&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>LICENSED UNDER CC BY-NC-SA 4.0</copyright>
        <lastBuildDate>Fri, 08 Mar 2024 22:30:20 +0800</lastBuildDate><atom:link href="https://4evergreat.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java-blog-18maven</title>
        <link>https://4evergreat.github.io/2024/java-blog-18/</link>
        <pubDate>Fri, 08 Mar 2024 22:30:20 +0800</pubDate>
        
        <guid>https://4evergreat.github.io/2024/java-blog-18/</guid>
        <description>&lt;img src="https://4evergreat.github.io/cover/Hong_Kong-Zhuhai-Macau_Bridge1.jpg" alt="Featured image of post Java-blog-18maven" /&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.apache.org/index.html#projects-list&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;apache 开源项目清单&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-maven的作用&#34;&gt;1. maven的作用
&lt;/h2&gt;&lt;h3 id=&#34;1依赖管理&#34;&gt;1.依赖管理
&lt;/h3&gt;&lt;p&gt;直接在pop.xml中管理依赖的信息。maven自动下载替换&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/mavenSeting.png&#34; alt=&#34;maven使用&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-统一项目结构&#34;&gt;2. 统一项目结构
&lt;/h3&gt;&lt;p&gt;各种不同的IDE中拥有相同的项目结构，实现跨IDE导入导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/mavenConstruct.png&#34; alt=&#34;maven的统一构建&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-项目构建&#34;&gt;3. 项目构建
&lt;/h3&gt;&lt;p&gt;标准跨平台（Linux、Win、Mac）的自动化项目构建方式。清理、编译、测试、打包、发布&lt;/p&gt;
&lt;h2 id=&#34;2-maven的介绍&#34;&gt;2. maven的介绍
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;maven 基于项目对象模型POM（project object model）的概念，通过一小段描述信息，来管理项目的构建。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://maven.apache.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maven官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/mavenElem.png&#34; alt=&#34;maven组成&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;仓库:用于存储资源，管理各种jar包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地仓库:自己计算机上的一个目录。 D:\JavaProject\Maven\repository&lt;/li&gt;
&lt;li&gt;中央仓库:由Maven团队维护的全球唯一的。仓库地址:https://repo1.maven.org/maven2/&lt;/li&gt;
&lt;li&gt;远程仓库(私服):一般由公司团队搭建的私有仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3maven的安装&#34;&gt;3.maven的安装
&lt;/h2&gt;&lt;p&gt;安装步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载源码包。以apache-maven-3.6.1-bin.zip为例子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压 apache-maven-3.6.1-bin.zip。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置本地仓库:修改 conf/settings.xml中的&lt;localRepository&gt;为一个指定目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//例子：推荐格式：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;localRepository&amp;gt;&lt;/span&gt;E:\apache-maven-3.6.1\mvn_repo&lt;span class=&#34;nt&#34;&gt;&amp;lt;/localRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//例子：自用的记录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;localRepository&amp;gt;&lt;/span&gt;D:\JavaProject\Maven\repository&lt;span class=&#34;nt&#34;&gt;&amp;lt;/localRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置阿里云私服(远程仓库):修改 conf/settings.xml中的&lt;mirrors&gt;标签，为其添加如下子标签&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nt&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;alimaven&lt;span class=&#34;nt&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nt&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;				&lt;span class=&#34;nt&#34;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;centrals/mirrorOf&amp;gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置环境变量:MAVEN HOME为maven的解压目录，并将其bin目录加入PATH环境变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置环境变量 MAVEN_HOME 和 maven包下 %MAVEN_HOME%\bin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Users\Administrator&amp;gt;mvn -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Apache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Maven home: D:\JavaProject\Maven\apache-maven-3.6.1\bin\..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Java version: 1.8.0_391, vendor: Oracle Corporation, runtime: D:\Java\jdk-1.8\jre
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Default locale: zh_CN, platform encoding: GBK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OS name: &amp;#34;windows 10&amp;#34;, version: &amp;#34;10.0&amp;#34;, arch: &amp;#34;amd64&amp;#34;, family: &amp;#34;windows&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-idea中创建maven项目&#34;&gt;4. IDEA中创建maven项目
&lt;/h2&gt;&lt;p&gt;4.1 不使用模板的话可以在new project中按下图操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/buildAMavenProject.png&#34; alt=&#34;maven项目创建&#34;  /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;使用模板 archetype 按下述博客操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jb51.net/article/274304.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何在IDEA2022中创建maven&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;maven 坐标： 是资源的唯一标识，通过该坐标可以为一定位资源位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GroupId : 当前项目隶属组织名（通常是域名反写）&lt;/li&gt;
&lt;li&gt;ArtifactId : 当前项目名（通常是模块名，如order-service）&lt;/li&gt;
&lt;li&gt;Version : 当前项目版本号&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.None&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;projcet01&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;44-导入maven工程&#34;&gt;4.4 导入maven工程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有两种方式，选中pom.xml文件即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/%e5%af%bc%e5%85%a5maven%e5%b7%a5%e7%a8%8b.png&#34; alt=&#34;maven项目创建&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/%e5%af%bc%e5%85%a5maven%e5%b7%a5%e7%a8%8b%e6%96%b9%e5%bc%8f%e4%ba%8c.png&#34; alt=&#34;maven项目创建&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;45-idea依赖配置&#34;&gt;4.5 IDEA依赖配置
&lt;/h3&gt;&lt;p&gt;依赖：指当前项目运行所需的 jar包，一个项目可以引入多个依赖。&lt;/p&gt;
&lt;p&gt;配置步骤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 在pom.xml中编写 &amp;lt;dependencies&amp;gt;标签
2. 在&amp;lt;dependencise&amp;gt;标签中使用 &amp;lt;dependency&amp;gt;引入maven坐标
3. 填写maven坐标（&amp;lt;groupId&amp;gt;&amp;lt;artifactId&amp;gt;&amp;lt;version&amp;gt;）
4. 点击刷新按钮，实现下载替换
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            //如果本地仓库有，填artifactId后自动提示其他两个
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.10&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果本地仓库有，填artifactId后自动提示其他两个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过一些网站搜索依赖的maven坐标&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mvnrepository.com&#34; &gt;maven 仓库网站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-依赖传递&#34;&gt;5. 依赖传递
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在pom.xml文件中右键 &amp;gt; Diagrams &amp;gt; Show Dependencies就可以看类似下面的树状图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/%e4%be%9d%e8%b5%96%e4%bc%a0%e9%80%92.png&#34; alt=&#34;maven项目创建&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;51-排除依赖&#34;&gt;5.1 排除依赖：
&lt;/h3&gt;&lt;p&gt;排除依赖：指主动断开传递过来的依赖的资源，被排除的资源无序指定版本。通过&lt;exclusion&gt;标签实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.None&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ProjectB&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            	&lt;span class=&#34;nt&#34;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;//断开从ProjectB传递过来的依赖APartOfProjectB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                	&lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.None&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            		&lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;APartOfProjectB&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    //不需要填写version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6-依赖范围&#34;&gt;6. 依赖范围
&lt;/h2&gt;&lt;p&gt;依赖的jar包，在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。&lt;/p&gt;
&lt;p&gt;如果希望限制依赖的使用范围，可以通过&lt;scope&gt;标签设置其作用范围。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;作用范围&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主程序范围有效（main文件夹范围内）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试程序范围有效（test文件夹范围内）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否参与打包运行（package指令范围内）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;scope标签的取值范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;scope&lt;/strong&gt;值&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;主程序&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;测试程序&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;打包（运行）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;范例&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;compile（默认）&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;log4j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;junit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;provided&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;servlet-api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runtime&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;jdbc驱动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //如果本地仓库有，填artifactId后自动提示其他两个
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.10&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //通过&lt;span class=&#34;nt&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;标签设置其作用范围。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&#34;nt&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;7-maven-生命周期&#34;&gt;7. maven 生命周期
&lt;/h2&gt;&lt;p&gt;Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。在Maven出现之前，项目构建的生命周期就已经存在，软件开发人员每天都在对项目进行清理，编译，测试及部署。&lt;/p&gt;
&lt;h3 id=&#34;71-maven的三套生命周期&#34;&gt;7.1 maven的三套生命周期
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Maven对项目构建的生命周期划分为3套（相互独立）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;clean：清理工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default：核心工作。如：编译、测试、打包、安装、部署等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;site：生成报告、发布站点等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png&#34; alt=&#34;maven生命周期&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;我们看到这三套生命周期，里面有很多很多的阶段，这么多生命周期阶段，其实我们常用的并不多，主要关注以下几个：&lt;/p&gt;
&lt;p&gt;• clean：移除上一次构建生成的文件&lt;/p&gt;
&lt;p&gt;• compile：编译项目源代码&lt;/p&gt;
&lt;p&gt;• test：使用合适的单元测试框架运行测试(junit)&lt;/p&gt;
&lt;p&gt;• package：将编译后的文件打包，如：jar、war等&lt;/p&gt;
&lt;p&gt;• install：安装项目到本地仓库&lt;/p&gt;
&lt;h3 id=&#34;72-maven生命周期的运行&#34;&gt;7.2 maven生命周期的运行
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式一 ： 命令行输入 mvn [周期名]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式二：IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/java%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/resources/photo/IDEAmaven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png&#34; alt=&#34;IDEAmaven生命周期&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;生命周期的顺序是：clean &amp;ndash;&amp;gt; validate &amp;ndash;&amp;gt; compile &amp;ndash;&amp;gt; test &amp;ndash;&amp;gt; package &amp;ndash;&amp;gt; verify &amp;ndash;&amp;gt; install &amp;ndash;&amp;gt; site &amp;ndash;&amp;gt; deploy .&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：在&lt;code&gt;同一套生命周期&lt;/code&gt;中，我们在执行后面的生命周期时，前面的生命周期都会执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;思考：当运行package生命周期时，clean、compile生命周期会不会运行？&lt;/p&gt;
&lt;p&gt;​		clean不会运行，compile会运行。  因为compile与package属于同一套生命周期，而clean与package不属于同一套生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
