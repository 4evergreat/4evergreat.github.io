<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>java学习笔记 on alwaysGreat&#39;s blog</title>
        <link>https://4evergreat.github.io/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <description>Recent content in java学习笔记 on alwaysGreat&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>LICENSED UNDER CC BY-NC-SA 4.0</copyright>
        <lastBuildDate>Sun, 26 Nov 2023 22:27:20 +0800</lastBuildDate><atom:link href="https://4evergreat.github.io/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java-blog-1JavaSE介绍与安装卸载</title>
        <link>https://4evergreat.github.io/2023/java-blog-1/</link>
        <pubDate>Sun, 26 Nov 2023 22:27:20 +0800</pubDate>
        
        <guid>https://4evergreat.github.io/2023/java-blog-1/</guid>
        <description>&lt;img src="https://4evergreat.github.io/cover/5a65990461edd3b5.jpg" alt="Featured image of post Java-blog-1JavaSE介绍与安装卸载" /&gt;&lt;h3 id=&#34;1java三大版本&#34;&gt;1.Java三大版本
&lt;/h3&gt;&lt;p&gt;javaSE: 标准版（桌面程序，控制台程序开发）&lt;/p&gt;
&lt;p&gt;JavaME：精简版（嵌入式开发）&lt;/p&gt;
&lt;p&gt;javaEE：企业级开发（web开发，服务器开发）&lt;/p&gt;
&lt;h3 id=&#34;2jdkjrejvm&#34;&gt;2.JDK、JRE、JVM
&lt;/h3&gt;&lt;p&gt;JDK: java development kit&lt;/p&gt;
&lt;p&gt;JRE : java runtime envirnment&lt;/p&gt;
&lt;p&gt;JVM : java virtual machine&lt;/p&gt;
&lt;p&gt;其中 JDK包含了JRE与JVM。JRE包含了JVM。&lt;/p&gt;
&lt;p&gt;安装了JRE后既可以运行java程序。JDK比JRE 多了一些开发工具，所以开发需要装JDK。&lt;/p&gt;
&lt;p&gt;JDK包含的基本组件包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javac – 编译器，将源程序转成字节码&lt;/li&gt;
&lt;li&gt;javadoc – 文档生成器，从源码注释中提取文档&lt;/li&gt;
&lt;li&gt;jdb – debugger，查错工具&lt;/li&gt;
&lt;li&gt;jar – 打包工具，将相关的类文件打包成一个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/resources/photo/JDK_JRE_JVM%e4%b9%8b%e9%97%b4%e7%9a%84%e5%85%b3%e7%b3%bb.jpg&#34; alt=&#34;三者的关系&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3安装jdk&#34;&gt;3.安装JDK
&lt;/h3&gt;&lt;h4 id=&#34;1如果openjdk输入-java--version显示的版本信息为&#34;&gt;1.如果Openjdk，输入 java -version显示的版本信息为
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[machao@dev ~]$ java -version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openjdk version &amp;#34;1.8.0_144&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OpenJDK Runtime Environment (build 1.8.0_144-b01)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OpenJDK 64-Bit Server VM (build 25.144-b01, mixed mode)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;2如果是sunoraclejdk-输入的java--version-显示的版本信息为&#34;&gt;2.如果是Sun/Oraclejdk ,输入的java -version 显示的版本信息为
&lt;/h4&gt;&lt;p&gt;注意：java  hotspot（TM） 64-BIT是说用的是64位的hotspot虚拟机  server 是说虚拟机运行在server模				 式下。 虚拟机有server 和client两种模式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Windows\system32&amp;gt;java -version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java version &amp;#34;1.8.0_391&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Java(TM) SE Runtime Environment (build 1.8.0_391-b13)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.391-b13, mixed mode)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3在命令窗口输入-java--verbose就可以查看安装路径&#34;&gt;3.在命令窗口输入 java -verbose，就可以查看安装路径
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Windows\system32&amp;gt;java -verbose
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Opened C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Loaded java.lang.Object from C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Loaded java.io.Serializable from C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Loaded jdk.internal.misc.TerminatingThreadLocal$1 from C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Loaded java.lang.Shutdown from C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Loaded java.lang.Shutdown$Lock from C:\Program Files\Java\jre-1.8\lib\rt.jar]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;4-安装jdk&#34;&gt;4. 安装JDK
&lt;/h4&gt;&lt;p&gt;建议下载JDK8, JDK11和JDK17, 其中企业运用JDK8比较多&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载安装包 &lt;a class=&#34;link&#34; href=&#34;https://www.oracle.com/java/technologies/downloads/#java8-windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;windows x86 JDK8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加环境变量 JAVA_HOME&lt;/li&gt;
&lt;li&gt;添加path 变量
&lt;ul&gt;
&lt;li&gt;%JAVA_HOME%\bin  //%%是路径引用&lt;/li&gt;
&lt;li&gt;%JAVA_HOME%\jre\bin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用java -version检验&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;5卸载jdk&#34;&gt;5.卸载JDK
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;删除Java的安装目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除JAVA_HOME&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除环境变量 PATH 下关于Java的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用java -version检验&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Java-blog-2用javac和java命令输出HelloWord</title>
        <link>https://4evergreat.github.io/2023/java-blog-2/</link>
        <pubDate>Fri, 24 Nov 2023 22:27:20 +0800</pubDate>
        
        <guid>https://4evergreat.github.io/2023/java-blog-2/</guid>
        <description>&lt;img src="https://4evergreat.github.io/cover/41F215B9.jpg" alt="Featured image of post Java-blog-2用javac和java命令输出HelloWord" /&gt;&lt;h3 id=&#34;代码用控制台便运行文件&#34;&gt;代码（用控制台便运行文件）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello Word!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;1-创建文件&#34;&gt;1. 创建文件
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件后缀名为.java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hello.java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[注意点]系统可能没有显示文件后缀名，我们需要手动打开&lt;/p&gt;
&lt;p&gt;窗口状态栏=&amp;gt;查看=&amp;gt;显示=&amp;gt;文件扩展名（勾选）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-编译--javac-文件名java&#34;&gt;2. 编译 : javac [文件名.java]
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Users\Administrator\Desktop\新建文件夹\java&amp;gt;javac Hello.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//会生成 Hello.class 文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3-运行-java-文件名&#34;&gt;3. 运行： java [文件名]
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Users\Administrator\Desktop\新建文件夹\java&amp;gt;java Hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello Word!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在运行 Hello.class文件，但是不需要添加文件后缀&lt;/p&gt;
&lt;h4 id=&#34;可能会遇到的情况&#34;&gt;可能会遇到的情况
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Java大小写敏感， 如上述代码中 System, String[], public 的大小写区分&lt;/li&gt;
&lt;li&gt;尽量使用英文&lt;/li&gt;
&lt;li&gt;文件名 和 类名必须保证一致，并且首字母大写&lt;/li&gt;
&lt;li&gt;符号使用的了中文&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4-java-运行机制&#34;&gt;4. java 运行机制
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/resources/photo/java%e8%bf%90%e8%a1%8c%e6%9c%ba%e5%88%b6.jpg&#34; alt=&#34;java 运行机制&#34;  /&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java-blog-305java注释、基本数据类型、类型转换、变量、命名规则和关键字</title>
        <link>https://4evergreat.github.io/2023/java-blog-3/</link>
        <pubDate>Fri, 24 Nov 2023 22:27:20 +0800</pubDate>
        
        <guid>https://4evergreat.github.io/2023/java-blog-3/</guid>
        <description>&lt;img src="https://4evergreat.github.io/cover/85b4b7adc8a3227a66565b22bf63231c.jpg" alt="Featured image of post Java-blog-305java注释、基本数据类型、类型转换、变量、命名规则和关键字" /&gt;&lt;h3 id=&#34;1-注释&#34;&gt;1. 注释
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单行注释 //注释&lt;/li&gt;
&lt;li&gt;多行注释 /* 注释 */&lt;/li&gt;
&lt;li&gt;文档注释 /** 注释 */&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-标识符命名规则-与-js-规则一样&#34;&gt;2. 标识符命名规则 (与 js 规则一样)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标识符可以含有 字母, 数字, 下划线_, (*注意此处相较于 c 语言多出一个符)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能以数字开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能是java中的保留字和关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java也采用了 unicode 编码方式，所以字母也可以是中文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议采用驼峰法：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; -首字母小写，每个单词开头字母大写，其余均小写
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3基本数据类型&#34;&gt;3.基本数据类型
&lt;/h3&gt;&lt;h4 id=&#34;31-整数型&#34;&gt;3.1 整数型
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;长度字节&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;byte类型&lt;/td&gt;
&lt;td&gt;1个字节&lt;/td&gt;
&lt;td&gt;8位&lt;/td&gt;
&lt;td&gt;-2^7 - 2^7-1&lt;/td&gt;
&lt;td&gt;-128 - 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short类型&lt;/td&gt;
&lt;td&gt;2个字节&lt;/td&gt;
&lt;td&gt;16位&lt;/td&gt;
&lt;td&gt;-2^15 - 2^15-1&lt;/td&gt;
&lt;td&gt;－32768－32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int 类型&lt;/td&gt;
&lt;td&gt;4个字节&lt;/td&gt;
&lt;td&gt;32位&lt;/td&gt;
&lt;td&gt;-2^31 - 1~2^31-1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long 类型&lt;/td&gt;
&lt;td&gt;8个字节&lt;/td&gt;
&lt;td&gt;64位&lt;/td&gt;
&lt;td&gt;-2^63 - 1~2^63-1&lt;/td&gt;
&lt;td&gt;末尾加L&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整型的范围与运行java代码的机器无关，这一点和C、C++不同，保证了代码在不同的平台之间的可移植型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int最为常用，char和short主要用于特定场合，比如底层处理文件、处理需要占用大量存储空间的数组。要表示的数据超过int类型的范围时使用长整型int.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常long类型后通常加字符“L”，例如 long a = 123L ; ， 但是&amp;quot;L&amp;quot;理论上不区分大小写，但若写成小写的&amp;quot;l&amp;quot;，容易与数字&amp;quot;1&amp;quot;混淆，不容易分辩，所以最好写成大写的“L”&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-浮点型&#34;&gt;3.2 浮点型
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;长度字节&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;float 类型&lt;/td&gt;
&lt;td&gt;4字节&lt;/td&gt;
&lt;td&gt;32位&lt;/td&gt;
&lt;td&gt;大约±3.402 823 47E+38F(有效位为6～7位)&lt;/td&gt;
&lt;td&gt;末尾加f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double 类型&lt;/td&gt;
&lt;td&gt;8字节&lt;/td&gt;
&lt;td&gt;64位&lt;/td&gt;
&lt;td&gt;大约±1.79769313486231570E+308(有效位为15位)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认浮点数使用类型为double， 其后可加字符“d”,&amp;ldquo;d&amp;quot;理论上不区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以为了区分，通常浮点型末尾末尾加字符”f”, 例如 float a =3.1415926535f ;， &amp;ldquo;f&amp;quot;理论上不区分大小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float 和 double 不能用来表示精确的值，如不能用来表示货币等。实际使用 BigDecimal 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;科学记数法: 结尾的&amp;quot;E+数字&amp;quot;表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103=3140，3.14E-3 就是 3.14 x 10-3 =0.00314&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显然±3.402 823 47E+38F范围大于-2^63 - 1~2^63-1，即float范围大于long，可惜float不是完全精确的。&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-字符型&#34;&gt;3.3 字符型
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;长度字节&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char 类型&lt;/td&gt;
&lt;td&gt;2个字节&lt;/td&gt;
&lt;td&gt;16位&lt;/td&gt;
&lt;td&gt;\u0000 -  \uffff&lt;/td&gt;
&lt;td&gt;0 - 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java的char类型可以表示标准的ASCII，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char类型还可以表示一个Unicode字符，代表一个单一的16位 Unicode 字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想要打印 Unicode 字符 可以使用 “\u”+数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符和字符串是两种不同的数据类型。char类型使用单引号&amp;rsquo;&amp;lsquo;表示，单引号里面只能有一个字符。字符串用双引号&amp;quot;&amp;ldquo;表示，双引号中可以有很多字符。&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;34-布尔型&#34;&gt;3.4 布尔型
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;长度字节&lt;/th&gt;
&lt;th&gt;位数&lt;/th&gt;
&lt;th&gt;取值范围&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean 类型&lt;/td&gt;
&lt;td&gt;0字节&lt;/td&gt;
&lt;td&gt;1 位&lt;/td&gt;
&lt;td&gt;true or false&lt;/td&gt;
&lt;td&gt;默认值是 false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JAVA规范中没有定义boolean类型的大小, 理论上组需要1bit 即可，但是编译时有定义：&lt;a class=&#34;link&#34; href=&#34;https://pic1.zhimg.com/v2-e0152c6207ea05fe7f39ce95e484b9c4_r.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM规范第2版 3.3.4节&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个的boolean 类型变量在编译的时候是使用的int 类型，4个字节(32bit)&lt;/li&gt;
&lt;li&gt;但如果是boolean数组在编译的时候是作为byte array来编译的，每一个元件占1字节(8 bits)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;35-对比总结&#34;&gt;3.5 对比总结
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;byte 作用类似于 c++中的char，但又无法直接存字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char 大小与c++不同，多了一个字节，2字节可存 unicode, 所以可以是中文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java 无 unsigned 类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java 常量的需要加修饰符 final，相当于c++中的 const&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://4evergreat.github.io/resources/photo/%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e5%ad%97%e8%8a%82%e6%95%b0.png&#34; alt=&#34;基本数据类型字节数&#34;  /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;36-类型转换&#34;&gt;3.6 类型转换
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;byte =&amp;gt; short =&amp;gt;int =&amp;gt; long =&amp;gt; float =&amp;gt; double&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;优先级&lt;/td&gt;
&lt;td&gt;低&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;raquo;&amp;gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;低可以直接转高，但是高转低会出现溢出和丢精度的现象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能对boolean类型进行类型转换，（String不是基本数据类型，能进行拼接）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高转低需要强制类型转换，显式写明要转换的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当多种数据类型的数据混合运算时，Java首先会自动将所有的数据转换成优先级高的的那种数据类型，然后再进行计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char byte short 三者计算时都会先转换为int型再进行运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不需要显式强制转换的特例：由于整数默认类型是int，JVM会根据声明和char byte short 三者各自的数值范围把 int 值 自动强制转换成对应的类型，如果值超过范围还是需要显式地强制转换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4变量&#34;&gt;4.变量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//类变量： 需要关键词 static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;population&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//实例变量：从属于对象; 如果不初始化，会赋予默认值0, 0.0, false, null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mian方法&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//局部变量： 声明后必须初始化值,不然报错&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*int i;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        System.out.println(i);*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 实例变量需要先创建一个对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 实例变量如果不复赋值则为默认值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 创建对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 变量类型 变量名 = new 构造函数；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 类变量的调用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 类变量无需对象就可以调用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        * 相当于c++中的静态成员,整个类共用一个
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;population&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;41-变量命名规则&#34;&gt;4.1 变量命名规则
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;所有变量、方法、类名: 见名知意&lt;/li&gt;
&lt;li&gt;类名 : 首字母 &lt;strong&gt;大写&lt;/strong&gt; 和驼峰原则: Man, GoodMan&lt;/li&gt;
&lt;li&gt;类成员变量、局部变量: 首字母 &lt;strong&gt;小写&lt;/strong&gt; 和驼峰原则 : monthSalary&lt;/li&gt;
&lt;li&gt;常量 : 大写字母和下划线 : MAX_VALUE&lt;/li&gt;
&lt;li&gt;方法名 : 首字母小写和驼峰原则 : run(), runRun0&lt;/li&gt;
&lt;li&gt;枚举类型里的枚举常量的名称应使用全大写字母，且不能包含空格、标点符号和其他符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5关键字&#34;&gt;5.关键字
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在Java中目前一共有53个关键字：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3个特殊直接量：true、false、null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2个保留字：goto、const&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/v2-92246a0e9b56415500f9497f868e1b79_r.jpg&#34; alt=&#34;java 关键字&#34;  /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;几个不常用的关键字：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assert : 断言（在异常这一章用）。它用于在程序执行时验证某些条件是否满足。如果条件成立，则程序继续执行；否则程序抛出异常或直接终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enum：枚举类。Java5之前，发挥类似作用的是final class。但是enum更方便。enum枚举类存储着枚举值的索引、名称、所有枚举值等重要信息，并且可以将每一个枚举值视为一个对象，进行自定义扩展属性和方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枚举类型的定义使用关键字“enum”，在定义中列出所有的枚举常量。每个枚举常量都是该枚举类型的实例，它们被分配了默认的名称&lt;/li&gt;
&lt;li&gt;枚举类型的实例可以通过名称或序号来访问。&lt;/li&gt;
&lt;li&gt;枚举类型的名称应该使用大写字母，以便与其他类和变量区分开来。枚举常量的名称也应该使用大写字母，且不能包含空格、标点符号和其他符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strictfp ： 用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transient ：声明不用序列化的成员域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;synchronized ： 表明一段代码需要同步执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;volatile ： 表明两个或者多个变量必须同步地发生变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;native :  用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
